name: CI

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

env:
  JAVA_VERSION: 17
  MAVEN_SETTINGS: .github/settings.xml

jobs:
  build:
    name: Maven Compile

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Update Maven Settings
        run: mkdir -p ~/.m2 ; cp ${{ env.MAVEN_SETTINGS }} ~/.m2

      - name: Cache Maven packages
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ needs.info.outputs.localRepository }}
          key: cache-1-${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: cache-1-${{ runner.os }}-m2

      # No Snapshot Updates, Batch Mode, Show errors and skip tests
      - name: Build Project
        run: mvn clean compile -nsu -B -e

      # Upload the built artifacts
      - name: Store Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: maven-target.zip
          retention-days: 2
          path: |
            ./target/**

  unit-test:
    name: Unit Tests

    needs: [ build ]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Update Maven Settings
        run: mkdir -p ~/.m2 ; cp ${{ env.MAVEN_SETTINGS }} ~/.m2

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          path: ./target
          name: maven-target.zip

      - name: Run unit tests
        run: |
          if ! mvn test -nsu -B; then
            find . -path '*/target/surefire-reports/*.xml' | zip -q reports-unit-tests.zip -@
            exit 1
          fi

      - name: Unit test reports
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: reports-unit-tests
          retention-days: 14
          path: reports-unit-tests.zip
          if-no-files-found: ignore

  analyze:
    name: Analyze

    needs: [ build ]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Update Maven Settings
        run: mkdir -p ~/.m2 ; cp ${{ env.MAVEN_SETTINGS }} ~/.m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Analyze with sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -nsu -DskipTests -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  checkstyle:
    name: Checkstyle

    needs: [ build ]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Update Maven Settings
        run: mkdir -p ~/.m2 ; cp ${{ env.MAVEN_SETTINGS }} ~/.m2

      - name: Spotless Check
        run: mvn -nsu -DskipTests -B -Pcheckstyle spotless:check

  snapshot-release:
    name: Perform Snapshot Release

    # Not on Pull Requests, but on push
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    needs: [ build, checkstyle, analyze, unit-test ]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Update Maven Settings
        run: mkdir -p ~/.m2 ; cp ${{ env.MAVEN_SETTINGS }} ~/.m2

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          path: ./target
          name: maven-target.zip

      - name: Build and Push Docker Image
        env:
          DOCKER_REGISTRY_USER: tobi6112
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -nsu -B jib:build